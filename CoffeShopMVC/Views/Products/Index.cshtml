@model IEnumerable<CoffeShopMVC.Models.Product>

@{
    ViewBag.Title = "Index";
    Layout = null;
}
<html>
<head>
    <style>
        *,
        *::after,
        *::before {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }
        
        html {
            font-size: 62.5%;
        }

        body {
            background-image: url("../../Content/bg.jpg");
            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;
            min-height: 100vh;
            padding: 2rem;
            color: hsla(0, 0%, 0%, .6);
            background: var(--background-color);
            text-align: center;
        }

        h1 {
            font-size: 3.2rem;
            padding-top: 2rem;
        }

            h1 + p {
                font-size: 1.8rem;
                padding: 2rem 0 3rem;
            }

        .main {
            display: flex;
            flex-wrap: wrap;
            justify-content: center;
            align-items: center;
        }

        .wrap {
            margin: 2rem;
            transform-style: preserve-3d;
            transform: perspective(100rem);
            cursor: pointer;
        }

        .container {
            --rX: 0;
            --rY: 0;
            --bX: 50%;
            --bY: 80%;
            width: 30rem;
            height: 36rem;
            border: 1px solid var(--background-color);
            border-radius: 1.6rem;
            padding: 4rem;
            display: flex;
            align-items: flex-end;
            position: relative;
            transform: rotateX(calc(var(--rX) * 1deg)) rotateY(calc(var(--rY) * 1deg));
            background: linear-gradient(hsla(0, 0%, 100%, .1), hsla(0, 0%, 100%, .1));
            background-repeat:no-repeat;
            
            background-position: var(--bX) var(--bY);
            background-size: 40rem auto;
            box-shadow: 0 0 3rem .5rem hsla(0, 0%, 0%, .2);
            transition: transform .6s 1s;
        }

            .container::before,
            .container::after {
                content: "";
                width: 2rem;
                height: 2rem;
                border: 1px solid #fff;
                position: absolute;
                z-index: 2;
                opacity: .3;
                transition: .3s;
            }

            .container::before {
                top: 2rem;
                right: 2rem;
                border-bottom-width: 0;
                border-left-width: 0;
            }

            .container::after {
                bottom: 2rem;
                left: 2rem;
                border-top-width: 0;
                border-right-width: 0;
            }

        .container--active {
            transition: none;
        }

        .container--2 {
            filter: hue-rotate(80deg) saturate(140%);
        }

        .container--3 {
            filter: hue-rotate(160deg) saturate(140%);
        }

        .container p {
            color: hsla(0, 0%, 100%, .6);
            font-size: 2.2rem;
            display:block;
        }

        .wrap:hover .container::before,
        .wrap:hover .container::after {
            width: calc(100% - 4rem);
            height: calc(100% - 4rem);
        }

        .abs-site-link {
            position: fixed;
            bottom: 20px;
            left: 20px;
            color: hsla(0, 0%, 0%, .6);
            font-size: 1.6rem;
        }
        .navbar-menu a {
            color: darkolivegreen;
            font-size: 13px;
            font-family: 'Raleway',sans-serif;
            font-weight: 100;
            padding: 12px 15px;
            border-radius: 2px;
            display: inline-block;
            text-transform: uppercase;
            text-decoration: none;
            transition: 0.4s;
        }

        .navbar-menu a:hover {
            background-color: darkgoldenrod;
            color: #000;
        }

        .box select {
            background-color: darkgoldenrod;
            color: black;
            padding: 12px;
            width: 250px;
            border: none;
            font-size: 20px;
            box-shadow: 0 5px 25px rgba(0, 0, 0, 0.2);
            -webkit-appearance: button;
            outline: none;
        }

        .box::before {
            content: "\f13a";
            font-family: FontAwesome;
            position: absolute;
            top: 0;
            right: 0;
            width: 20%;
            height: 100%;
            text-align: center;
            font-size: 28px;
            line-height: 45px;
            color: rgba(255, 255, 255, 0.5);
            background-color: rgba(255, 255, 255, 0.1);
            pointer-events: none;
        }

        .box:hover::before {
            color: rgba(255, 255, 255, 0.6);
            background-color: rgba(255, 255, 255, 0.2);
        }

        .box select option {
            padding: 30px;
        }
        input[type=submit] {
            background-color: darkgoldenrod;
            border: none;
            color: black;
            padding: 16px 32px;
            text-decoration: none;
            margin: 4px 2px;
            cursor: pointer;
        }
    </style>
    <title>index products</title>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width,initial-scale=1.0">

</head>
<body>
    <nav class="navbar">
            <h1 class="logo"><i class="fas fa-mug-hot"></i></h1>
            <div class="navbar-menu">
                <a href="/Home/index">home</a>
            </div>
    </nav>
    <div>
        <h1><i>Chose a category you want:</i></h1>
        <div class="box">
            <form action="#">
                <select name="Category" id="">
                    <option value="Cold Drink">Cold Drink</option>
                    <option value="Hot Drink">Hot Drink</option>
                    <option value="Food">Food</option>
                </select>
                <input type="submit" value="Submit">
            </form>
        </div>
        <div class="box">
            <form action="#">
                <select name="high_low_price" id="">
                    <option value="high price to low price">high price to low price</option>
                    <option value="low price to high price">low price to high price</option>
                </select>
                <input type="submit" value="Submit">
            </form>
        </div>

        <section class="main">
            @{
                int i = 0;
            }
            @foreach (var item in Model)
            {
                i++;
                <div class="wrap wrap--@i.ToString()">
                    <div class="container container--1" style="background: url('@item.Image');">
                        @if (item.OnSale)
                        {
                    <p style="color:aqua !important;">@item.Name  <span style="color:red; text-decoration:line-through !important;">@item.Price₪</span>  @item.NewPrice₪   </p> }
                                    else
                                    {
                                        <p style="color:aqua !important;">@item.Name  @item.Price₪   </p>
                                    }


                    </div>
                <a href="@Url.Action("ChooseSeat","Orders",new { id = item.Pid})">Add To Cart</a>
                </div>
            }
        </section>

    </div>


    <script>

    class parallaxTiltEffect {

      constructor({element, tiltEffect}) {

        this.element = element;
        this.container = this.element.querySelector(".container");
        this.size = [300, 360];
        [this.w, this.h] = this.size;

        this.tiltEffect = tiltEffect;

        this.mouseOnComponent = false;

        this.handleMouseMove = this.handleMouseMove.bind(this);
        this.handleMouseEnter = this.handleMouseEnter.bind(this);
        this.handleMouseLeave = this.handleMouseLeave.bind(this);
        this.defaultStates = this.defaultStates.bind(this);
        this.setProperty = this.setProperty.bind(this);
        this.init = this.init.bind(this);

        this.init();
      }

      handleMouseMove(event) {
        const {offsetX, offsetY} = event;

        let X;
        let Y;

        if (this.tiltEffect === "reverse") {
          X = ((offsetX - (this.w/2)) / 3) / 3;
          Y = (-(offsetY - (this.h/2)) / 3) / 3;
        }

        else if (this.tiltEffect === "normal") {
          X = (-(offsetX - (this.w/2)) / 3) / 3;
          Y = ((offsetY - (this.h/2)) / 3) / 3;
        }

        this.setProperty('--rY', X.toFixed(2));
        this.setProperty('--rX', Y.toFixed(2));

        this.setProperty('--bY', (80 - (X/4).toFixed(2)) + '%');
        this.setProperty('--bX', (50 - (Y/4).toFixed(2)) + '%');
      }

      handleMouseEnter() {
        this.mouseOnComponent = true;
        this.container.classList.add("container--active");
      }

      handleMouseLeave() {
        this.mouseOnComponent = false;
        this.defaultStates();
      }

      defaultStates() {
        this.container.classList.remove("container--active");
        this.setProperty('--rY', 0);
        this.setProperty('--rX', 0);
        this.setProperty('--bY', '80%');
        this.setProperty('--bX', '50%');
      }

      setProperty(p, v) {
        return this.container.style.setProperty(p, v);
      }

      init() {
        this.element.addEventListener('mousemove', this.handleMouseMove);
        this.element.addEventListener('mouseenter', this.handleMouseEnter);
        this.element.addEventListener('mouseleave', this.handleMouseLeave);
      }

    }

    const $ = e => document.querySelector(e);

    const wrap1 = new parallaxTiltEffect({
      element: $('.wrap--1'),
      tiltEffect: 'reverse'
    });

    const wrap2 = new parallaxTiltEffect({
      element: $('.wrap--2'),
      tiltEffect: 'normal'
    });

    const wrap3 = new parallaxTiltEffect({
      element: $('.wrap--3'),
      tiltEffect: 'reverse'
    });
    </script>
</body>
</html>
